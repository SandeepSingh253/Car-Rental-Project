/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.car_rental.Screens;
import com.mycompany.car_rental.ConnectionClass.ConnectionClass;
import constants.Values;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.*;

/**
 *
 * @author SONY VIAO
 */
public class AdminDashBoard extends javax.swing.JFrame implements Values{

    /**
     * Creates new form AdminDashBoard
     */
    public AdminDashBoard(UserModel user) {
        currentUser=user;
        initComponents();
        tabbedPane.setSelectedComponent(profilePanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        adminsPanel = new javax.swing.JPanel();
        adminsScrollPane = new javax.swing.JScrollPane();
        adminsTable = new javax.swing.JTable();
        managesrInternalFrame = new javax.swing.JInternalFrame();
        addRemoveUpdateTabbedPanel = new javax.swing.JTabbedPane();
        addManagerPanel = new javax.swing.JPanel();
        addMUnameLabel = new javax.swing.JLabel();
        addMPassLabel = new javax.swing.JLabel();
        managerAddManagerUNameTF = new javax.swing.JTextField();
        managerAddManagerPasswordTF = new javax.swing.JTextField();
        managerAddManagerButton = new javax.swing.JButton();
        managerAddmanagerDialogLabel = new javax.swing.JLabel();
        managerAddManagerUNameDialogLabel = new javax.swing.JLabel();
        managerAddManagerPasswordDialogLabel = new javax.swing.JLabel();
        removeManagerPanel = new javax.swing.JPanel();
        removeMUnameLabel = new javax.swing.JLabel();
        managerRemoveManagerUNameTF = new javax.swing.JTextField();
        managerRemoveManagerButton = new javax.swing.JButton();
        updateManagerPanel = new javax.swing.JPanel();
        managerUpdateManagerUnameLabel = new javax.swing.JLabel();
        managerUpdateManagerNewPasswordLabel = new javax.swing.JLabel();
        managerUpdateManagerUnameTF = new javax.swing.JTextField();
        managerUpdateManagerNewPasswordTF = new javax.swing.JTextField();
        managerUpdateManagerUpdateButton = new javax.swing.JButton();
        managerUpdateManagerNewUnameTF = new javax.swing.JTextField();
        managerUpdateManagerNewUnameLabel = new javax.swing.JLabel();
        addRemoveUpdateManagerButtonPanel = new javax.swing.JPanel();
        addManagerAccessButton = new javax.swing.JButton();
        removeManagerAccessButton = new javax.swing.JButton();
        updateManagerAccessButton = new javax.swing.JButton();
        managerTableScrollPane = new javax.swing.JScrollPane();
        managerTable = new javax.swing.JTable();
        profilePanel = new javax.swing.JPanel();
        profileUsernameLabel = new javax.swing.JLabel();
        profileUpdateProfileLabel = new javax.swing.JLabel();
        profileEnterPasswordLabel = new javax.swing.JLabel();
        profileEnterPasswordTF = new javax.swing.JTextField();
        profileupdateProfileButton = new javax.swing.JButton();
        profileCurrentUserLabel = new javax.swing.JLabel();
        profileNewUsernameLabel = new javax.swing.JLabel();
        profileNewPasswordLabel = new javax.swing.JLabel();
        profileNewUsernameTF = new javax.swing.JTextField();
        profileNewPasswordTF = new javax.swing.JTextField();
        vehiclesInternalFrame = new javax.swing.JInternalFrame();
        vehicleTableScrollPane = new javax.swing.JScrollPane();
        vehiclesTable = new javax.swing.JTable();
        addRemoveUpdateManagerButtonPanel1 = new javax.swing.JPanel();
        updateVehiclesButton = new javax.swing.JButton();
        logsPanel = new javax.swing.JPanel();
        logTableScrollPane = new javax.swing.JScrollPane();
        logsTable = new javax.swing.JTable();
        optionPanel = new javax.swing.JPanel();
        managersButton = new javax.swing.JButton();
        vehicleButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        adminLabel = new javax.swing.JLabel();
        adminsButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();
        billingButton = new javax.swing.JButton();
        emplyeeButton = new javax.swing.JButton();
        logsButton = new javax.swing.JButton();
        dashBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(800, 450));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        adminsPanel.setBackground(new java.awt.Color(255, 255, 255));
        adminsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        adminsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        adminsScrollPane.setViewportView(adminsTable);

        adminsPanel.add(adminsScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 76, 640, 450));

        tabbedPane.addTab("Admins", adminsPanel);

        managesrInternalFrame.setBorder(null);
        managesrInternalFrame.setToolTipText("");
        managesrInternalFrame.setVisible(true);
        managesrInternalFrame.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addRemoveUpdateTabbedPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        addRemoveUpdateTabbedPanel.setPreferredSize(new java.awt.Dimension(314, 185));

        addManagerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addMUnameLabel.setBackground(new java.awt.Color(51, 51, 51));
        addMUnameLabel.setForeground(java.awt.Color.white);
        addMUnameLabel.setText("Username");
        addManagerPanel.add(addMUnameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        addMPassLabel.setBackground(new java.awt.Color(51, 51, 51));
        addMPassLabel.setForeground(java.awt.Color.white);
        addMPassLabel.setText("Password");
        addManagerPanel.add(addMPassLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        managerAddManagerUNameTF.setBackground(new java.awt.Color(51, 51, 51));
        managerAddManagerUNameTF.setForeground(java.awt.Color.white);
        managerAddManagerUNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerAddManagerUNameTFActionPerformed(evt);
            }
        });
        addManagerPanel.add(managerAddManagerUNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 200, -1));

        managerAddManagerPasswordTF.setBackground(new java.awt.Color(51, 51, 51));
        managerAddManagerPasswordTF.setForeground(java.awt.Color.white);
        managerAddManagerPasswordTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerAddManagerPasswordTFActionPerformed(evt);
            }
        });
        addManagerPanel.add(managerAddManagerPasswordTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 200, -1));

        managerAddManagerButton.setBackground(new java.awt.Color(51, 51, 51));
        managerAddManagerButton.setForeground(java.awt.Color.white);
        managerAddManagerButton.setText("ADD");
        managerAddManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerAddManagerButtonActionPerformed(evt);
            }
        });
        addManagerPanel.add(managerAddManagerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, -1, -1));

        managerAddmanagerDialogLabel.setBackground(new java.awt.Color(51, 51, 51));
        managerAddmanagerDialogLabel.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        addManagerPanel.add(managerAddmanagerDialogLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 170, 20));

        managerAddManagerUNameDialogLabel.setBackground(new java.awt.Color(51, 51, 51));
        managerAddManagerUNameDialogLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addManagerPanel.add(managerAddManagerUNameDialogLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 20, 20));

        managerAddManagerPasswordDialogLabel.setBackground(new java.awt.Color(51, 51, 51));
        managerAddManagerPasswordDialogLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        addManagerPanel.add(managerAddManagerPasswordDialogLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 20, 20));

        addRemoveUpdateTabbedPanel.addTab("AM", addManagerPanel);

        removeManagerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        removeMUnameLabel.setBackground(new java.awt.Color(51, 51, 51));
        removeMUnameLabel.setForeground(new java.awt.Color(255, 255, 255));
        removeMUnameLabel.setText("Username");
        removeManagerPanel.add(removeMUnameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        managerRemoveManagerUNameTF.setBackground(new java.awt.Color(51, 51, 51));
        managerRemoveManagerUNameTF.setForeground(new java.awt.Color(255, 255, 255));
        managerRemoveManagerUNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerRemoveManagerUNameTFActionPerformed(evt);
            }
        });
        removeManagerPanel.add(managerRemoveManagerUNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 200, -1));

        managerRemoveManagerButton.setBackground(new java.awt.Color(51, 51, 51));
        managerRemoveManagerButton.setForeground(new java.awt.Color(255, 255, 255));
        managerRemoveManagerButton.setText("REMOVE");
        managerRemoveManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerRemoveManagerButtonActionPerformed(evt);
            }
        });
        removeManagerPanel.add(managerRemoveManagerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, -1, -1));

        addRemoveUpdateTabbedPanel.addTab("RM", removeManagerPanel);

        updateManagerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        managerUpdateManagerUnameLabel.setBackground(new java.awt.Color(51, 51, 51));
        managerUpdateManagerUnameLabel.setForeground(new java.awt.Color(255, 255, 255));
        managerUpdateManagerUnameLabel.setText("Username");
        updateManagerPanel.add(managerUpdateManagerUnameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        managerUpdateManagerNewPasswordLabel.setBackground(new java.awt.Color(51, 51, 51));
        managerUpdateManagerNewPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        managerUpdateManagerNewPasswordLabel.setText("New Password");
        updateManagerPanel.add(managerUpdateManagerNewPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        managerUpdateManagerUnameTF.setBackground(new java.awt.Color(51, 51, 51));
        managerUpdateManagerUnameTF.setForeground(new java.awt.Color(255, 255, 255));
        updateManagerPanel.add(managerUpdateManagerUnameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 190, -1));

        managerUpdateManagerNewPasswordTF.setBackground(new java.awt.Color(51, 51, 51));
        managerUpdateManagerNewPasswordTF.setForeground(new java.awt.Color(255, 255, 255));
        updateManagerPanel.add(managerUpdateManagerNewPasswordTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 190, -1));

        managerUpdateManagerUpdateButton.setBackground(new java.awt.Color(51, 51, 51));
        managerUpdateManagerUpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        managerUpdateManagerUpdateButton.setText("UPDATE");
        managerUpdateManagerUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerUpdateManagerUpdateButtonActionPerformed(evt);
            }
        });
        updateManagerPanel.add(managerUpdateManagerUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, -1, -1));

        managerUpdateManagerNewUnameTF.setBackground(new java.awt.Color(51, 51, 51));
        managerUpdateManagerNewUnameTF.setForeground(new java.awt.Color(255, 255, 255));
        managerUpdateManagerNewUnameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerUpdateManagerNewUnameTFActionPerformed(evt);
            }
        });
        updateManagerPanel.add(managerUpdateManagerNewUnameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 190, -1));

        managerUpdateManagerNewUnameLabel.setBackground(new java.awt.Color(51, 51, 51));
        managerUpdateManagerNewUnameLabel.setForeground(new java.awt.Color(255, 255, 255));
        managerUpdateManagerNewUnameLabel.setText("New Username");
        updateManagerPanel.add(managerUpdateManagerNewUnameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

        addRemoveUpdateTabbedPanel.addTab("UM", updateManagerPanel);

        managesrInternalFrame.getContentPane().add(addRemoveUpdateTabbedPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 6, 480, -1));

        addRemoveUpdateManagerButtonPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addManagerAccessButton.setBackground(new java.awt.Color(51, 51, 51));
        addManagerAccessButton.setForeground(new java.awt.Color(255, 255, 255));
        addManagerAccessButton.setText("Add Manager");
        addManagerAccessButton.setPreferredSize(new java.awt.Dimension(123, 22));
        addManagerAccessButton.setVerifyInputWhenFocusTarget(false);
        addManagerAccessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addManagerAccessButtonActionPerformed(evt);
            }
        });
        addRemoveUpdateManagerButtonPanel.add(addManagerAccessButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 123, 22));

        removeManagerAccessButton.setBackground(new java.awt.Color(51, 51, 51));
        removeManagerAccessButton.setForeground(new java.awt.Color(255, 255, 255));
        removeManagerAccessButton.setText("Remove Manager");
        removeManagerAccessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeManagerAccessButtonActionPerformed(evt);
            }
        });
        addRemoveUpdateManagerButtonPanel.add(removeManagerAccessButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 123, 22));

        updateManagerAccessButton.setBackground(new java.awt.Color(51, 51, 51));
        updateManagerAccessButton.setForeground(new java.awt.Color(255, 255, 255));
        updateManagerAccessButton.setText("Update Manager");
        updateManagerAccessButton.setPreferredSize(new java.awt.Dimension(123, 22));
        updateManagerAccessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateManagerAccessButtonActionPerformed(evt);
            }
        });
        addRemoveUpdateManagerButtonPanel.add(updateManagerAccessButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 123, 22));

        managesrInternalFrame.getContentPane().add(addRemoveUpdateManagerButtonPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 190));

        managerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        managerTableScrollPane.setViewportView(managerTable);

        managesrInternalFrame.getContentPane().add(managerTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 640, 310));

        tabbedPane.addTab("Managers", managesrInternalFrame);

        profilePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        profileUsernameLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        profileUsernameLabel.setForeground(new java.awt.Color(0, 0, 255));
        profileUsernameLabel.setText(currentUser.getUsername());
        profilePanel.add(profileUsernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 255, 32));

        profileUpdateProfileLabel.setBackground(new java.awt.Color(51, 51, 51));
        profileUpdateProfileLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        profileUpdateProfileLabel.setForeground(new java.awt.Color(255, 255, 255));
        profileUpdateProfileLabel.setText("Update Profile");
        profilePanel.add(profileUpdateProfileLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        profileEnterPasswordLabel.setBackground(new java.awt.Color(51, 51, 51));
        profileEnterPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        profileEnterPasswordLabel.setText("Enter Password");
        profilePanel.add(profileEnterPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));

        profileEnterPasswordTF.setBackground(new java.awt.Color(51, 51, 51));
        profileEnterPasswordTF.setForeground(new java.awt.Color(255, 255, 255));
        profilePanel.add(profileEnterPasswordTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, 200, -1));

        profileupdateProfileButton.setBackground(new java.awt.Color(51, 51, 51));
        profileupdateProfileButton.setForeground(new java.awt.Color(255, 255, 255));
        profileupdateProfileButton.setText("UPDATE");
        profileupdateProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileupdateProfileButtonActionPerformed(evt);
            }
        });
        profilePanel.add(profileupdateProfileButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 470, -1, -1));

        profileCurrentUserLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        profileCurrentUserLabel.setForeground(new java.awt.Color(255, 255, 255));
        profileCurrentUserLabel.setText("Current User");
        profilePanel.add(profileCurrentUserLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        profileNewUsernameLabel.setBackground(new java.awt.Color(51, 51, 51));
        profileNewUsernameLabel.setForeground(new java.awt.Color(255, 255, 255));
        profileNewUsernameLabel.setText("New Username");
        profilePanel.add(profileNewUsernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, -1, -1));

        profileNewPasswordLabel.setBackground(new java.awt.Color(51, 51, 51));
        profileNewPasswordLabel.setForeground(new java.awt.Color(255, 255, 255));
        profileNewPasswordLabel.setText("New Password");
        profilePanel.add(profileNewPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, -1, -1));

        profileNewUsernameTF.setBackground(new java.awt.Color(51, 51, 51));
        profileNewUsernameTF.setForeground(new java.awt.Color(255, 255, 255));
        profilePanel.add(profileNewUsernameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 350, 200, -1));

        profileNewPasswordTF.setBackground(new java.awt.Color(51, 51, 51));
        profileNewPasswordTF.setForeground(new java.awt.Color(255, 255, 255));
        profilePanel.add(profileNewPasswordTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 410, 200, -1));

        tabbedPane.addTab("Profile", profilePanel);

        vehiclesInternalFrame.setBorder(null);
        vehiclesInternalFrame.setVisible(true);
        vehiclesInternalFrame.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        vehiclesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        vehicleTableScrollPane.setViewportView(vehiclesTable);

        vehiclesInternalFrame.getContentPane().add(vehicleTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 640, 380));

        addRemoveUpdateManagerButtonPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        updateVehiclesButton.setText("Update List");
        updateVehiclesButton.setPreferredSize(new java.awt.Dimension(123, 22));
        updateVehiclesButton.setVerifyInputWhenFocusTarget(false);
        updateVehiclesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateVehiclesButtonActionPerformed(evt);
            }
        });
        addRemoveUpdateManagerButtonPanel1.add(updateVehiclesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 123, 22));

        vehiclesInternalFrame.getContentPane().add(addRemoveUpdateManagerButtonPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 640, 120));

        tabbedPane.addTab("Vehicles", vehiclesInternalFrame);

        logsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        logTableScrollPane.setViewportView(logsTable);

        logsPanel.add(logTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 640, 440));

        tabbedPane.addTab("Logs", logsPanel);

        getContentPane().add(tabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, -110, 640, 560));

        optionPanel.setBackground(new java.awt.Color(153, 153, 153));
        optionPanel.setPreferredSize(new java.awt.Dimension(150, 450));
        optionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        managersButton.setBackground(new java.awt.Color(102, 102, 102));
        managersButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        managersButton.setForeground(new java.awt.Color(255, 255, 255));
        managersButton.setText("Managers");
        managersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managersButtonActionPerformed(evt);
            }
        });
        optionPanel.add(managersButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 100, -1));

        vehicleButton.setBackground(new java.awt.Color(102, 102, 102));
        vehicleButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        vehicleButton.setForeground(new java.awt.Color(255, 255, 255));
        vehicleButton.setText("Vehicles");
        vehicleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicleButtonActionPerformed(evt);
            }
        });
        optionPanel.add(vehicleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 100, -1));

        logOutButton.setBackground(new java.awt.Color(102, 102, 102));
        logOutButton.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        logOutButton.setForeground(new java.awt.Color(255, 255, 255));
        logOutButton.setText("LOG OUT");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });
        optionPanel.add(logOutButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, -1, -1));

        adminLabel.setBackground(new java.awt.Color(255, 255, 255));
        adminLabel.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        adminLabel.setForeground(new java.awt.Color(255, 255, 255));
        adminLabel.setText("ADMIN");
        optionPanel.add(adminLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 110, 40));

        adminsButton.setBackground(new java.awt.Color(102, 102, 102));
        adminsButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        adminsButton.setForeground(new java.awt.Color(255, 255, 255));
        adminsButton.setText("Admins");
        adminsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminsButtonActionPerformed(evt);
            }
        });
        optionPanel.add(adminsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 100, -1));

        profileButton.setBackground(new java.awt.Color(102, 102, 102));
        profileButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        profileButton.setForeground(new java.awt.Color(255, 255, 255));
        profileButton.setText("PROFILE");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });
        optionPanel.add(profileButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 80, -1));

        billingButton.setBackground(new java.awt.Color(102, 102, 102));
        billingButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        billingButton.setForeground(new java.awt.Color(255, 255, 255));
        billingButton.setText("Billing");
        billingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billingButtonActionPerformed(evt);
            }
        });
        optionPanel.add(billingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 100, -1));

        emplyeeButton.setBackground(new java.awt.Color(102, 102, 102));
        emplyeeButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        emplyeeButton.setForeground(new java.awt.Color(255, 255, 255));
        emplyeeButton.setText("Employee");
        emplyeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emplyeeButtonActionPerformed(evt);
            }
        });
        optionPanel.add(emplyeeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 100, -1));

        logsButton.setBackground(new java.awt.Color(102, 102, 102));
        logsButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        logsButton.setForeground(new java.awt.Color(255, 255, 255));
        logsButton.setText("Logs");
        logsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logsButtonActionPerformed(evt);
            }
        });
        optionPanel.add(logsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 100, -1));

        dashBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/dashBack.jpg"))); // NOI18N
        optionPanel.add(dashBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 160, 500));

        getContentPane().add(optionPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 450));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void managersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managersButtonActionPerformed
        updateManagerTable();
        tabbedPane.setSelectedComponent(managesrInternalFrame);
    }//GEN-LAST:event_managersButtonActionPerformed

    private void vehicleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehicleButtonActionPerformed
        updateVehicleTable();
        tabbedPane.setSelectedComponent(vehiclesInternalFrame);
    }//GEN-LAST:event_vehicleButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        LogModel userLog=new LogModel(currentUser);
        userLog.uploadLog("Logged Out");
        dispose();
        new LoginPage().setVisible(true);
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void adminsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminsButtonActionPerformed
        updateAdminTabel();
        tabbedPane.setSelectedComponent(adminsPanel);
    }//GEN-LAST:event_adminsButtonActionPerformed

    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        tabbedPane.setSelectedComponent(profilePanel);
    }//GEN-LAST:event_profileButtonActionPerformed

    private void managerAddManagerUNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerAddManagerUNameTFActionPerformed
        managerAddManagerUNameDialogLabel.setText("");
        if (managerAddManagerUNameTF.getText().isBlank()) {
            managerAddManagerUNameDialogLabel.setText(" *");
            return;
        }
        managerAddManagerPasswordTF.requestFocus();
    }//GEN-LAST:event_managerAddManagerUNameTFActionPerformed

    private void managerRemoveManagerUNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerRemoveManagerUNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_managerRemoveManagerUNameTFActionPerformed

    private void profileupdateProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileupdateProfileButtonActionPerformed
        String enteredPass=profileEnterPasswordTF.getText();
        
        String newUsername=profileNewUsernameTF.getText();
        String newPassword=profileNewPasswordTF.getText();
        
        if(enteredPass.isBlank() || newPassword.isBlank() || newUsername.isBlank()){
            JOptionPane.showMessageDialog(null, "Empty Fields");  
            return;
        }    
        if(!currentUser.getPassword().equals(enteredPass)){
            JOptionPane.showMessageDialog(null, "Incorrect password");
            return;
        }
        UserModel updatedUser=new UserModel(currentUser.getID());
        updatedUser.setUsername(newUsername);
        updatedUser.setPassword(newPassword);
        updatedUser.setRole(currentUser.getRole());
        
        int answer = updateUser(updatedUser);
        
        switch (answer) {
                case USERNAME_ALREAD_IN_USE:
                    JOptionPane.showMessageDialog(null, "Username already used");
                    break;
                case UPDATE_SUCCESSFUL:
                    LogModel userLog=new LogModel(currentUser);
                    userLog.uploadLog("Updated Profile new Username "+newUsername);
                    
                    currentUser.setUsername(newUsername);
                    currentUser.setPassword(newPassword);
                    JOptionPane.showMessageDialog(null, "Value Updated");
                    profileUsernameLabel.setText(currentUser.getUsername());
                    
                    updateAdminTabel();
                    break;
                case UPDATE_UNSUCCESSFUL:
                    JOptionPane.showMessageDialog(null, "Error");
                    break;
                default:
                    break;
            }
        
        //sets textfields to empty
        profileEnterPasswordTF.setText("");
        profileNewUsernameTF.setText("");
        profileNewPasswordTF.setText("");
    }//GEN-LAST:event_profileupdateProfileButtonActionPerformed

    private void addManagerAccessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addManagerAccessButtonActionPerformed
        addRemoveUpdateTabbedPanel.setSelectedComponent(addManagerPanel);
    }//GEN-LAST:event_addManagerAccessButtonActionPerformed

    private void managerAddManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerAddManagerButtonActionPerformed
        
        managerAddmanagerDialogLabel.setText("");
        managerAddManagerUNameDialogLabel.setText("");
        managerAddManagerUNameDialogLabel.setText("");
                
        String username = managerAddManagerUNameTF.getText();
        String password = managerAddManagerPasswordTF.getText();
        int role=MANAGER_ROLE;
        
        
        
        if (username.isBlank()) {
            managerAddManagerUNameDialogLabel.setText(" *");
            if (password.isBlank()) {
                managerAddManagerPasswordDialogLabel.setText(" *");
            }
            return;
        }
        if (password.isBlank()) {
            managerAddManagerPasswordDialogLabel.setText(" *");
            if (username.isBlank()) {
                managerAddManagerUNameDialogLabel.setText(" *");
                return;
            }
        }
        
        int answer = addUser(username,password,role);
        if(answer==USERNAME_ALREAD_IN_USE){
            managerAddmanagerDialogLabel.setText("username already exists");
            managerAddmanagerDialogLabel.setForeground(Color.red);
            return;
        }
        if(answer==USER_ADDED){
            managerAddmanagerDialogLabel.setText("Manager successfull added!!");
            managerAddmanagerDialogLabel.setForeground(Color.green);
            managerAddManagerUNameTF.setText("");
            managerAddManagerPasswordTF.setText("");
            
            LogModel userLog=new LogModel(currentUser);
            userLog.uploadLog("Added Manager "+username);
            
            updateManagerTable();
            return;
        }
        
        if(answer==USER_NOT_ADDED){
            managerAddmanagerDialogLabel.setText("Manager not added!!");
            managerAddmanagerDialogLabel.setForeground(Color.red);
            managerAddManagerUNameTF.setText("");
            managerAddManagerPasswordTF.setText("");
        }
    
    }//GEN-LAST:event_managerAddManagerButtonActionPerformed

    private void removeManagerAccessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeManagerAccessButtonActionPerformed
        addRemoveUpdateTabbedPanel.setSelectedComponent(removeManagerPanel);
    }//GEN-LAST:event_removeManagerAccessButtonActionPerformed

    private void updateManagerAccessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateManagerAccessButtonActionPerformed
        addRemoveUpdateTabbedPanel.setSelectedComponent(updateManagerPanel);
    }//GEN-LAST:event_updateManagerAccessButtonActionPerformed

    private void managerAddManagerPasswordTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerAddManagerPasswordTFActionPerformed
       managerAddManagerButtonActionPerformed(evt);
    }//GEN-LAST:event_managerAddManagerPasswordTFActionPerformed

    private void managerRemoveManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerRemoveManagerButtonActionPerformed
        
        String username =managerRemoveManagerUNameTF.getText();
        UserModel user=userExist(username);
        if(user==null){
            JOptionPane.showMessageDialog(null, "No such manager exist");
            return;
        }        
        int userRole=user.getRole();
        if(userRole!=MANAGER_ROLE){
            JOptionPane.showMessageDialog(null, "No such manager exist");
            return;
        }
        
        boolean managerDeleted=deleteUser(user.getUsername());
        
        if(managerDeleted){
            LogModel userLog=new LogModel(currentUser);
            userLog.uploadLog("Removed Manager "+username);
            
            updateManagerTable();
            JOptionPane.showMessageDialog(null, "Manager deleted");
        }else{
            JOptionPane.showMessageDialog(null, "Manager not deleted");
        }
            
    }//GEN-LAST:event_managerRemoveManagerButtonActionPerformed

    private void managerUpdateManagerUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerUpdateManagerUpdateButtonActionPerformed
        
        String username = managerUpdateManagerUnameTF.getText();
        UserModel user=userExist(username);
        if(user==null){
            JOptionPane.showMessageDialog(null, "No Such User Exist");
            return;
        }
        UserModel newUser=user;
        
        String newUsername = managerUpdateManagerNewUnameTF.getText();
        String newPassword = managerUpdateManagerNewPasswordTF.getText();
        
        if (newUsername.isBlank()) {
            JOptionPane.showMessageDialog(null, "Enter username");
            return;
        }
        if (newPassword.isBlank()) {
            JOptionPane.showMessageDialog(null, "Enter password");
            return;
        }
        
        newUser.setUsername(newUsername);
        newUser.setPassword(newPassword);
        
        int userUpdate=updateUser(newUser);
            
        switch (userUpdate) {
            case USERNAME_ALREAD_IN_USE:
                break;
            case UPDATE_SUCCESSFUL:
                LogModel userLog=new LogModel(currentUser);
                userLog.uploadLog("Updated Manager "+username+" to "+newUsername);
                 updateManagerTable();
                break;
            case UPDATE_UNSUCCESSFUL:

                break;
            default:
                break;
        }
    }//GEN-LAST:event_managerUpdateManagerUpdateButtonActionPerformed
    
    private int addUser(String username,String password,int role){

        final String searchStatement = "SELECT * from users where username=?";
            
            try {
                PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
                searchPreparedStatement.setString(1, username);
                
                ResultSet searhResultSet = searchPreparedStatement.executeQuery();
                
                while (searhResultSet.next()) {
                    return USERNAME_ALREAD_IN_USE;
                }
                
                final String insertStatement = "INSERT INTO users(username, password, role) values(?,?,?)";
                PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(insertStatement);
                preparedStatement.setString(1, username);
                preparedStatement.setString(2, password);
                preparedStatement.setInt(3, role);

                final int isAdded = preparedStatement.executeUpdate();

                if (isAdded > 0) {
                    return USER_ADDED;
                }
            } catch (SQLException ex) {
                System.out.println("error in " + AdminDashBoard.class.getName() + " = " + ex);
            }
        return USER_NOT_ADDED;
    }
    
    private UserModel userExist(String username) {
        try {
            final String searchStatement = "SELECT * from users where username=?";
            PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
            searchPreparedStatement.setString(1, username);
            ResultSet searhResultSet = searchPreparedStatement.executeQuery();

            while (searhResultSet.next()) {
                UserModel user=new UserModel(Integer.parseInt(searhResultSet.getString("id")));
                user.setUsername(username);
                user.setPassword(searhResultSet.getString("password"));
                user.setRole(searhResultSet.getInt("role"));
                return user;
            }
        } catch (SQLException ex) {
                System.out.println("error in " + AdminDashBoard.class.getName() + " = " + ex);
        }
        return null;
    }
    
    private void updateManagerTable(){
        final String statement = "SELECT * from users where role=?";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            preparedStatement.setInt(1, MANAGER_ROLE);
            ResultSet resultSet = preparedStatement.executeQuery();
            final String[] headerName = {"ID","Username", "Password"};
            DefaultTableModel model = new DefaultTableModel(null, headerName){  
                @Override
                public boolean isCellEditable(int row,int column){
                 return false;   
                }
            };
            managerTable.setModel(model);
            Object[] row = new Object[3];

            while (resultSet.next()) {
                row[0] = resultSet.getString("id");
                row[1] = resultSet.getString("username");
                row[2] = resultSet.getString("password");
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminDashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateVehicleTable(){
        final String statement = "SELECT * from vehicles";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            
            ResultSet resultSet = preparedStatement.executeQuery();
            final String[] headerName = {"ID","Model", "Number","Max Seats","Rent/Day","On Rent"};
            DefaultTableModel model = new DefaultTableModel(null, headerName){  
                @Override
                public boolean isCellEditable(int row,int column){
                 return false;   
                }
            };
            vehiclesTable.setModel(model);
            Object[] row = new Object[6];

            while (resultSet.next()) {
                row[0] = resultSet.getString("id");
                row[1] = resultSet.getString("model");
                row[2] = resultSet.getString("number");
                row[3] = resultSet.getString("max_seats");
                row[4] = resultSet.getString("rent_per_day");
                row[5] = resultSet.getString("is_rented");
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminDashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateLogsTable(){
        final String statement = "SELECT * from logs";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            ResultSet resultSet = preparedStatement.executeQuery();
            final String[] headerName = {"User ID","Username", "User Role","Log"};
            DefaultTableModel model = new DefaultTableModel(null, headerName){  
                @Override
                public boolean isCellEditable(int row,int column){
                 return false;   
                }
            };
            logsTable.setModel(model);
            Object[] row = new Object[4];

            while (resultSet.next()) {
                row[0] = resultSet.getString("user_id");
                row[1] = resultSet.getString("user_name");
                row[2] = resultSet.getString("user_role");
                row[3] = resultSet.getString("log");
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminDashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void managerUpdateManagerNewUnameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerUpdateManagerNewUnameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_managerUpdateManagerNewUnameTFActionPerformed

    private void updateVehiclesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateVehiclesButtonActionPerformed
        new AddVehicle(currentUser).setVisible(true);
        dispose();
    }//GEN-LAST:event_updateVehiclesButtonActionPerformed

    private void billingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billingButtonActionPerformed
        new BillingScreen(currentUser).setVisible(true);
        dispose();
    }//GEN-LAST:event_billingButtonActionPerformed

    private void emplyeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emplyeeButtonActionPerformed
        new UpdateEmployee(currentUser).setVisible(true);
        dispose(); 
    }//GEN-LAST:event_emplyeeButtonActionPerformed

    private void logsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logsButtonActionPerformed
        tabbedPane.setSelectedComponent(logsPanel);
        updateLogsTable();
    }//GEN-LAST:event_logsButtonActionPerformed

    private int updateUser(UserModel user){
        String newUsername=user.getUsername();
        String newPassword=user.getPassword();
        int role= user.getRole();
        
        final String searchStatement = "SELECT * from users where username=?";
        try {
            PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
            searchPreparedStatement.setString(1, newUsername);

            ResultSet searhResultSet = searchPreparedStatement.executeQuery();

            while (searhResultSet.next()) {                
                return USERNAME_ALREAD_IN_USE;
            }
            final String insertStatement = "update users set `username`=?, `password`=?, `role`=? where `id`=?";
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(insertStatement);
            preparedStatement.setString(1, newUsername);
            preparedStatement.setString(2, newPassword);
            preparedStatement.setInt(3, role);
            preparedStatement.setString(4, Integer.toString(user.getID()));

            final int isAdded = preparedStatement.executeUpdate();

            if (isAdded > 0) {
                return UPDATE_SUCCESSFUL;
            } 
        } catch (SQLException ex) {
            System.out.println("error in " + AdminDashBoard.class.getName() + " = " + ex);
        }    
        
        return UPDATE_UNSUCCESSFUL;
    }
    
    //returns true if user deleted.
    private boolean deleteUser(String username){
        
        final String statement = "delete from users where `username`=?";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            preparedStatement.setString(1, username);
            int f=preparedStatement.executeUpdate();
            
            // f>0 means account deleted, f<=0 means not deleted
            return f>0;
        } catch (SQLException ex) {
                System.out.println("error in " + AdminDashBoard.class.getName() + " = " + ex);
        }
        return false;
    }
    
    private void updateAdminTabel() {
        final String statement = "SELECT * from users where role=?";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            preparedStatement.setInt(1, ADMIN_ROLE);
            ResultSet resultSet = preparedStatement.executeQuery();
            final String[] headerName = {"ID","Username", "Role"};
            DefaultTableModel model = new DefaultTableModel(null, headerName){  
                @Override
                public boolean isCellEditable(int row,int column){
                 return false;   
                }
            };
            adminsTable.setModel(model);
            Object[] row = new Object[3];

            while (resultSet.next()) {
                row[0] = resultSet.getString("id");
                row[1] = resultSet.getString("username");
                row[2] = resultSet.getInt("role");
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminDashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private static UserModel currentUser;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addMPassLabel;
    private javax.swing.JLabel addMUnameLabel;
    private javax.swing.JButton addManagerAccessButton;
    private javax.swing.JPanel addManagerPanel;
    private javax.swing.JPanel addRemoveUpdateManagerButtonPanel;
    private javax.swing.JPanel addRemoveUpdateManagerButtonPanel1;
    private javax.swing.JTabbedPane addRemoveUpdateTabbedPanel;
    private javax.swing.JLabel adminLabel;
    private javax.swing.JButton adminsButton;
    private javax.swing.JPanel adminsPanel;
    private javax.swing.JScrollPane adminsScrollPane;
    private javax.swing.JTable adminsTable;
    private javax.swing.JButton billingButton;
    private javax.swing.JLabel dashBackground;
    private javax.swing.JButton emplyeeButton;
    private javax.swing.JButton logOutButton;
    private javax.swing.JScrollPane logTableScrollPane;
    private javax.swing.JButton logsButton;
    private javax.swing.JPanel logsPanel;
    private javax.swing.JTable logsTable;
    private javax.swing.JButton managerAddManagerButton;
    private javax.swing.JLabel managerAddManagerPasswordDialogLabel;
    private javax.swing.JTextField managerAddManagerPasswordTF;
    private javax.swing.JLabel managerAddManagerUNameDialogLabel;
    private javax.swing.JTextField managerAddManagerUNameTF;
    private javax.swing.JLabel managerAddmanagerDialogLabel;
    private javax.swing.JButton managerRemoveManagerButton;
    private javax.swing.JTextField managerRemoveManagerUNameTF;
    private javax.swing.JTable managerTable;
    private javax.swing.JScrollPane managerTableScrollPane;
    private javax.swing.JLabel managerUpdateManagerNewPasswordLabel;
    private javax.swing.JTextField managerUpdateManagerNewPasswordTF;
    private javax.swing.JLabel managerUpdateManagerNewUnameLabel;
    private javax.swing.JTextField managerUpdateManagerNewUnameTF;
    private javax.swing.JLabel managerUpdateManagerUnameLabel;
    private javax.swing.JTextField managerUpdateManagerUnameTF;
    private javax.swing.JButton managerUpdateManagerUpdateButton;
    private javax.swing.JButton managersButton;
    private javax.swing.JInternalFrame managesrInternalFrame;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JButton profileButton;
    private javax.swing.JLabel profileCurrentUserLabel;
    private javax.swing.JLabel profileEnterPasswordLabel;
    private javax.swing.JTextField profileEnterPasswordTF;
    private javax.swing.JLabel profileNewPasswordLabel;
    private javax.swing.JTextField profileNewPasswordTF;
    private javax.swing.JLabel profileNewUsernameLabel;
    private javax.swing.JTextField profileNewUsernameTF;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JLabel profileUpdateProfileLabel;
    private javax.swing.JLabel profileUsernameLabel;
    private javax.swing.JButton profileupdateProfileButton;
    private javax.swing.JLabel removeMUnameLabel;
    private javax.swing.JButton removeManagerAccessButton;
    private javax.swing.JPanel removeManagerPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton updateManagerAccessButton;
    private javax.swing.JPanel updateManagerPanel;
    private javax.swing.JButton updateVehiclesButton;
    private javax.swing.JButton vehicleButton;
    private javax.swing.JScrollPane vehicleTableScrollPane;
    private javax.swing.JInternalFrame vehiclesInternalFrame;
    private javax.swing.JTable vehiclesTable;
    // End of variables declaration//GEN-END:variables

}
