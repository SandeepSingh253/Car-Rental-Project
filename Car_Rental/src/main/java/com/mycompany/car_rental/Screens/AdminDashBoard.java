/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.car_rental.Screens;
import com.mycompany.car_rental.ConnectionClass.ConnectionClass;
import constants.Values;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import models.UserModel;

/**
 *
 * @author SONY VIAO
 */
public class AdminDashBoard extends javax.swing.JFrame implements Values{

    /**
     * Creates new form AdminDashBoard
     */
    public AdminDashBoard(UserModel user) {
        currentUser=user;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        vehiclesPanel = new javax.swing.JPanel();
        adminsPanel = new javax.swing.JPanel();
        adminsScrollPane = new javax.swing.JScrollPane();
        adminsTable = new javax.swing.JTable();
        vehicleCategoriesPanel = new javax.swing.JPanel();
        managesrInternalFrame = new javax.swing.JInternalFrame();
        addRemoveUpdateTabbedPanel = new javax.swing.JTabbedPane();
        addManagerPanel = new javax.swing.JPanel();
        addMUnameLabel = new javax.swing.JLabel();
        addMPassLabel = new javax.swing.JLabel();
        managerAddManagerUNameTF = new javax.swing.JTextField();
        managerAddManagerPasswordTF = new javax.swing.JTextField();
        managerAddManagerButton = new javax.swing.JButton();
        managerAddmanagerDialogLabel = new javax.swing.JLabel();
        managerAddManagerUNameDialogLabel = new javax.swing.JLabel();
        managerAddManagerPasswordDialogLabel = new javax.swing.JLabel();
        removeManagerPanel = new javax.swing.JPanel();
        removeMUnameLabel = new javax.swing.JLabel();
        managerRemoveManagerUNameTF = new javax.swing.JTextField();
        managerRemoveManagerButton = new javax.swing.JButton();
        updateManagerPanel = new javax.swing.JPanel();
        managerUpdateManagerUnameLabel = new javax.swing.JLabel();
        managerUpdateManagerNewPasswordLabel = new javax.swing.JLabel();
        managerUpdateManagerUnameTF = new javax.swing.JTextField();
        managerUpdateManagerNewPasswordTF = new javax.swing.JTextField();
        managerUpdateManagerUpdateButton = new javax.swing.JButton();
        managerUpdateManagerNewUnameTF = new javax.swing.JTextField();
        managerUpdateManagerNewUnameLabel = new javax.swing.JLabel();
        addRemoveUpdateManagerButtonPanel = new javax.swing.JPanel();
        addManagerAccessButton = new javax.swing.JButton();
        removeManagerAccessButton = new javax.swing.JButton();
        updateManagerAccessButton = new javax.swing.JButton();
        managerTableScrollPane = new javax.swing.JScrollPane();
        managerTable = new javax.swing.JTable();
        profilePanel = new javax.swing.JPanel();
        profileUsernameLabel = new javax.swing.JLabel();
        profileUpdateProfileLabel = new javax.swing.JLabel();
        profileEnterPasswordLabel = new javax.swing.JLabel();
        profileEnterPasswordTF = new javax.swing.JTextField();
        profileupdateProfileButton = new javax.swing.JButton();
        profileCurrentUserLabel = new javax.swing.JLabel();
        profileNewUsernameLabel = new javax.swing.JLabel();
        profileNewPasswordLabel = new javax.swing.JLabel();
        profileNewUsernameTF = new javax.swing.JTextField();
        profileNewPasswordTF = new javax.swing.JTextField();
        optionPanel = new javax.swing.JPanel();
        managersButton = new javax.swing.JButton();
        vehicleButton = new javax.swing.JButton();
        logOutButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        vehicleCategoriesButton = new javax.swing.JButton();
        adminsButton = new javax.swing.JButton();
        profileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImages(null);
        setMinimumSize(new java.awt.Dimension(800, 450));
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        vehiclesPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout vehiclesPanelLayout = new javax.swing.GroupLayout(vehiclesPanel);
        vehiclesPanel.setLayout(vehiclesPanelLayout);
        vehiclesPanelLayout.setHorizontalGroup(
            vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        vehiclesPanelLayout.setVerticalGroup(
            vehiclesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 527, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Vehicles", vehiclesPanel);

        adminsPanel.setBackground(new java.awt.Color(255, 255, 255));
        adminsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        adminsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        adminsScrollPane.setViewportView(adminsTable);

        adminsPanel.add(adminsScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 76, 640, 450));

        tabbedPane.addTab("Admins", adminsPanel);

        vehicleCategoriesPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout vehicleCategoriesPanelLayout = new javax.swing.GroupLayout(vehicleCategoriesPanel);
        vehicleCategoriesPanel.setLayout(vehicleCategoriesPanelLayout);
        vehicleCategoriesPanelLayout.setHorizontalGroup(
            vehicleCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        vehicleCategoriesPanelLayout.setVerticalGroup(
            vehicleCategoriesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 527, Short.MAX_VALUE)
        );

        tabbedPane.addTab("Vehicle Categories", vehicleCategoriesPanel);

        managesrInternalFrame.setBorder(null);
        managesrInternalFrame.setToolTipText("");
        managesrInternalFrame.setVisible(true);
        managesrInternalFrame.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addRemoveUpdateTabbedPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        addRemoveUpdateTabbedPanel.setPreferredSize(new java.awt.Dimension(314, 185));

        addManagerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addMUnameLabel.setText("Username");
        addManagerPanel.add(addMUnameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));

        addMPassLabel.setText("Password");
        addManagerPanel.add(addMPassLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        managerAddManagerUNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerAddManagerUNameTFActionPerformed(evt);
            }
        });
        addManagerPanel.add(managerAddManagerUNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 200, -1));

        managerAddManagerPasswordTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerAddManagerPasswordTFActionPerformed(evt);
            }
        });
        addManagerPanel.add(managerAddManagerPasswordTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 200, -1));

        managerAddManagerButton.setText("ADD");
        managerAddManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerAddManagerButtonActionPerformed(evt);
            }
        });
        addManagerPanel.add(managerAddManagerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, -1, -1));

        managerAddmanagerDialogLabel.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        addManagerPanel.add(managerAddmanagerDialogLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 170, 20));

        managerAddManagerUNameDialogLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        managerAddManagerUNameDialogLabel.setForeground(java.awt.Color.red);
        addManagerPanel.add(managerAddManagerUNameDialogLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, 20, 20));

        managerAddManagerPasswordDialogLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        managerAddManagerPasswordDialogLabel.setForeground(java.awt.Color.red);
        addManagerPanel.add(managerAddManagerPasswordDialogLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, 20, 20));

        addRemoveUpdateTabbedPanel.addTab("AM", addManagerPanel);

        removeManagerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        removeMUnameLabel.setText("Username");
        removeManagerPanel.add(removeMUnameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 50, -1, -1));

        managerRemoveManagerUNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerRemoveManagerUNameTFActionPerformed(evt);
            }
        });
        removeManagerPanel.add(managerRemoveManagerUNameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 200, -1));

        managerRemoveManagerButton.setText("REMOVE");
        managerRemoveManagerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerRemoveManagerButtonActionPerformed(evt);
            }
        });
        removeManagerPanel.add(managerRemoveManagerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, -1, -1));

        addRemoveUpdateTabbedPanel.addTab("RM", removeManagerPanel);

        updateManagerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        managerUpdateManagerUnameLabel.setText("Username");
        updateManagerPanel.add(managerUpdateManagerUnameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        managerUpdateManagerNewPasswordLabel.setText("New Password");
        updateManagerPanel.add(managerUpdateManagerNewPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));
        updateManagerPanel.add(managerUpdateManagerUnameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 190, -1));
        updateManagerPanel.add(managerUpdateManagerNewPasswordTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 190, -1));

        managerUpdateManagerUpdateButton.setText("UPDATE");
        managerUpdateManagerUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerUpdateManagerUpdateButtonActionPerformed(evt);
            }
        });
        updateManagerPanel.add(managerUpdateManagerUpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 110, -1, -1));

        managerUpdateManagerNewUnameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerUpdateManagerNewUnameTFActionPerformed(evt);
            }
        });
        updateManagerPanel.add(managerUpdateManagerNewUnameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 70, 190, -1));

        managerUpdateManagerNewUnameLabel.setText("New Username");
        updateManagerPanel.add(managerUpdateManagerNewUnameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, 20));

        addRemoveUpdateTabbedPanel.addTab("UM", updateManagerPanel);

        managesrInternalFrame.getContentPane().add(addRemoveUpdateTabbedPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 6, 480, -1));

        addRemoveUpdateManagerButtonPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addManagerAccessButton.setText("Add Manager");
        addManagerAccessButton.setPreferredSize(new java.awt.Dimension(123, 22));
        addManagerAccessButton.setVerifyInputWhenFocusTarget(false);
        addManagerAccessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addManagerAccessButtonActionPerformed(evt);
            }
        });
        addRemoveUpdateManagerButtonPanel.add(addManagerAccessButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 123, 22));

        removeManagerAccessButton.setText("Remove Manager");
        removeManagerAccessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeManagerAccessButtonActionPerformed(evt);
            }
        });
        addRemoveUpdateManagerButtonPanel.add(removeManagerAccessButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 123, 22));

        updateManagerAccessButton.setText("Update Manager");
        updateManagerAccessButton.setPreferredSize(new java.awt.Dimension(123, 22));
        updateManagerAccessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateManagerAccessButtonActionPerformed(evt);
            }
        });
        addRemoveUpdateManagerButtonPanel.add(updateManagerAccessButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 123, 22));

        managesrInternalFrame.getContentPane().add(addRemoveUpdateManagerButtonPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 190));

        managerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        managerTableScrollPane.setViewportView(managerTable);

        managesrInternalFrame.getContentPane().add(managerTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, 640, 310));

        tabbedPane.addTab("Managers", managesrInternalFrame);

        profilePanel.setBackground(new java.awt.Color(255, 255, 255));
        profilePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        profileUsernameLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        profileUsernameLabel.setForeground(new java.awt.Color(0, 0, 255));
        profileUsernameLabel.setText(currentUser.getUsername());
        profilePanel.add(profileUsernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 150, 255, 32));

        profileUpdateProfileLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        profileUpdateProfileLabel.setText("Update Profile");
        profilePanel.add(profileUpdateProfileLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, -1, -1));

        profileEnterPasswordLabel.setText("Enter Password");
        profilePanel.add(profileEnterPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 280, -1, -1));
        profilePanel.add(profileEnterPasswordTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 280, 200, -1));

        profileupdateProfileButton.setText("UPDATE");
        profileupdateProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileupdateProfileButtonActionPerformed(evt);
            }
        });
        profilePanel.add(profileupdateProfileButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 470, -1, -1));

        profileCurrentUserLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        profileCurrentUserLabel.setText("Current User");
        profilePanel.add(profileCurrentUserLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        profileNewUsernameLabel.setText("New Username");
        profilePanel.add(profileNewUsernameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 350, -1, -1));

        profileNewPasswordLabel.setText("New Password");
        profilePanel.add(profileNewPasswordLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, -1, -1));
        profilePanel.add(profileNewUsernameTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 350, 200, -1));
        profilePanel.add(profileNewPasswordTF, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 410, 200, -1));

        tabbedPane.addTab("Profile", profilePanel);

        getContentPane().add(tabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, -110, 640, 560));

        optionPanel.setBackground(new java.awt.Color(153, 153, 153));
        optionPanel.setPreferredSize(new java.awt.Dimension(150, 450));
        optionPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        managersButton.setText("Managers");
        managersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managersButtonActionPerformed(evt);
            }
        });
        optionPanel.add(managersButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 100, -1));

        vehicleButton.setText("Vehicles");
        vehicleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicleButtonActionPerformed(evt);
            }
        });
        optionPanel.add(vehicleButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 100, -1));

        logOutButton.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        logOutButton.setText("LOG OUT");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });
        optionPanel.add(logOutButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 410, -1, -1));

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setText("ADMIN");
        optionPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 110, 40));

        vehicleCategoriesButton.setText("Vehicle categories");
        vehicleCategoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vehicleCategoriesButtonActionPerformed(evt);
            }
        });
        optionPanel.add(vehicleCategoriesButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 140, -1));

        adminsButton.setText("Admins");
        adminsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminsButtonActionPerformed(evt);
            }
        });
        optionPanel.add(adminsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 190, 100, -1));

        profileButton.setText("PROFILE");
        profileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileButtonActionPerformed(evt);
            }
        });
        optionPanel.add(profileButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, 80, -1));

        getContentPane().add(optionPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 160, 450));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void managersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managersButtonActionPerformed
        updateManagerTable();
        tabbedPane.setSelectedComponent(managesrInternalFrame);
    }//GEN-LAST:event_managersButtonActionPerformed

    private void vehicleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehicleButtonActionPerformed
        tabbedPane.setSelectedComponent(vehiclesPanel);
    }//GEN-LAST:event_vehicleButtonActionPerformed

    private void vehicleCategoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vehicleCategoriesButtonActionPerformed

        tabbedPane.setSelectedComponent(vehicleCategoriesPanel);
    }//GEN-LAST:event_vehicleCategoriesButtonActionPerformed

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        dispose();
        new LoginPage().setVisible(true);
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void adminsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminsButtonActionPerformed
        updateAdminTabel();
        tabbedPane.setSelectedComponent(adminsPanel);
    }//GEN-LAST:event_adminsButtonActionPerformed

    private void profileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileButtonActionPerformed
        tabbedPane.setSelectedComponent(profilePanel);
    }//GEN-LAST:event_profileButtonActionPerformed

    private void managerAddManagerUNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerAddManagerUNameTFActionPerformed
        managerAddManagerUNameDialogLabel.setText("");
        if (managerAddManagerUNameTF.getText().isBlank()) {
            managerAddManagerUNameDialogLabel.setText(" *");
            return;
        }
        managerAddManagerPasswordTF.requestFocus();
    }//GEN-LAST:event_managerAddManagerUNameTFActionPerformed

    private void managerRemoveManagerUNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerRemoveManagerUNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_managerRemoveManagerUNameTFActionPerformed

    private void profileupdateProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileupdateProfileButtonActionPerformed
        String enteredPass=profileEnterPasswordTF.getText();
        
        String newUsername=profileNewUsernameTF.getText();
        String newPassword=profileNewPasswordTF.getText();
        
        if(enteredPass.isBlank() || newPassword.isBlank() || newUsername.isBlank()){
            JOptionPane.showMessageDialog(null, "Empty Fields");  
            return;
        }    
        if(!currentUser.getPassword().equals(enteredPass)){
            JOptionPane.showMessageDialog(null, "Incorrect password");
            return;
        }
        
        currentUser.setUsername(newUsername);
        currentUser.setPassword(newPassword);
        
        int answer = updateUser(currentUser);
        
        switch (answer) {
                case USERNAME_ALREAD_IN_USE:
                    JOptionPane.showMessageDialog(null, "Username already used");
                    break;
                case UPDATE_SUCCESSFUL:
                    JOptionPane.showMessageDialog(null, "Value Updated");
                    profileUsernameLabel.setText(currentUser.getUsername());
                    updateAdminTabel();
                    break;
                case UPDATE_UNSUCCESSFUL:
                    JOptionPane.showMessageDialog(null, "Error");
                    break;
                default:
                    break;
            }
        
        //sets textfields to empty
        profileEnterPasswordTF.setText("");
        profileNewUsernameTF.setText("");
        profileNewPasswordTF.setText("");
    }//GEN-LAST:event_profileupdateProfileButtonActionPerformed

    private void addManagerAccessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addManagerAccessButtonActionPerformed
        addRemoveUpdateTabbedPanel.setSelectedComponent(addManagerPanel);
    }//GEN-LAST:event_addManagerAccessButtonActionPerformed

    private void managerAddManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerAddManagerButtonActionPerformed
        
        managerAddmanagerDialogLabel.setText("");
        managerAddManagerUNameDialogLabel.setText("");
        managerAddManagerUNameDialogLabel.setText("");
                
        String username = managerAddManagerUNameTF.getText();
        String password = managerAddManagerPasswordTF.getText();
        int role=MANAGER_ROLE;
        
        
        
        if (username.isBlank()) {
            managerAddManagerUNameDialogLabel.setText(" *");
            if (password.isBlank()) {
                managerAddManagerPasswordDialogLabel.setText(" *");
            }
            return;
        }
        if (password.isBlank()) {
            managerAddManagerPasswordDialogLabel.setText(" *");
            if (username.isBlank()) {
                managerAddManagerUNameDialogLabel.setText(" *");
                return;
            }
        }
        
        int answer = addUser(username,password,role);
        if(answer==USERNAME_ALREAD_IN_USE){
            managerAddmanagerDialogLabel.setText("username already exists");
            managerAddmanagerDialogLabel.setForeground(Color.red);
            return;
        }
        if(answer==USER_ADDED){
            managerAddmanagerDialogLabel.setText("Manager successfull added!!");
            managerAddmanagerDialogLabel.setForeground(Color.green);
            managerAddManagerUNameTF.setText("");
            managerAddManagerPasswordTF.setText("");
            updateManagerTable();
            return;
        }
        
        if(answer==USER_NOT_ADDED){
            managerAddmanagerDialogLabel.setText("Manager not added!!");
            managerAddmanagerDialogLabel.setForeground(Color.red);
            managerAddManagerUNameTF.setText("");
            managerAddManagerPasswordTF.setText("");
        }
    
    }//GEN-LAST:event_managerAddManagerButtonActionPerformed

    private void removeManagerAccessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeManagerAccessButtonActionPerformed
        addRemoveUpdateTabbedPanel.setSelectedComponent(removeManagerPanel);
    }//GEN-LAST:event_removeManagerAccessButtonActionPerformed

    private void updateManagerAccessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateManagerAccessButtonActionPerformed
        addRemoveUpdateTabbedPanel.setSelectedComponent(updateManagerPanel);
    }//GEN-LAST:event_updateManagerAccessButtonActionPerformed

    private void managerAddManagerPasswordTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerAddManagerPasswordTFActionPerformed
       managerAddManagerButtonActionPerformed(evt);
    }//GEN-LAST:event_managerAddManagerPasswordTFActionPerformed

    private void managerRemoveManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerRemoveManagerButtonActionPerformed
        
        String username =managerRemoveManagerUNameTF.getText();
        UserModel user=userExist(username);
        if(user==null){
            JOptionPane.showMessageDialog(null, "No such manager exist");
            return;
        }        
        int userRole=user.getRole();
        if(userRole!=MANAGER_ROLE){
            JOptionPane.showMessageDialog(null, "No such manager exist");
        }
        
        boolean managerDeleted=deleteUser(user.getUsername());
        
        if(managerDeleted){
            updateManagerTable();
            JOptionPane.showMessageDialog(null, "Manager deleted");
        }else{
            JOptionPane.showMessageDialog(null, "Manager not deleted");
        }
            
    }//GEN-LAST:event_managerRemoveManagerButtonActionPerformed

    private void managerUpdateManagerUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerUpdateManagerUpdateButtonActionPerformed
        
        String username = managerUpdateManagerUnameTF.getText();
        UserModel user=userExist(username);
        if(user==null){
            JOptionPane.showMessageDialog(null, "No Such User Exist");
            return;
        }
        UserModel newUser=user;
        
        String newUsername = managerUpdateManagerNewUnameTF.getText();
        String newPassword = managerUpdateManagerNewPasswordTF.getText();
        newUser.setUsername(newUsername);
        newUser.setPassword(newPassword);
        if (newUsername.isBlank()) {
            JOptionPane.showMessageDialog(null, "Enter email");
            return;
        }
        if (newPassword.isBlank()) {
            JOptionPane.showMessageDialog(null, "Enter password");
            return;
        }
        int userUpdate=updateUser(newUser);
            
            switch (userUpdate) {
                case USERNAME_ALREAD_IN_USE:
                    break;
                case UPDATE_SUCCESSFUL:
                     updateManagerTable();
                    break;
                case UPDATE_UNSUCCESSFUL:
                    
                    break;
                default:
                    break;
            }
    }//GEN-LAST:event_managerUpdateManagerUpdateButtonActionPerformed
    
    private int addUser(String username,String password,int role){

        final String searchStatement = "SELECT * from users where username=?";
            
            try {
                PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
                searchPreparedStatement.setString(1, username);
                
                ResultSet searhResultSet = searchPreparedStatement.executeQuery();
                
                while (searhResultSet.next()) {
                    return USERNAME_ALREAD_IN_USE;
                }
                
                final String insertStatement = "INSERT INTO users(username, password, role) values(?,?,?)";
                PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(insertStatement);
                preparedStatement.setString(1, username);
                preparedStatement.setString(2, password);
                preparedStatement.setInt(3, role);

                final int isAdded = preparedStatement.executeUpdate();

                if (isAdded > 0) {
                    return USER_ADDED;
                }
            } catch (SQLException ex) {
                System.out.println("error in " + AdminSignUp.class.getName() + " = " + ex);
            }
        return USER_NOT_ADDED;
    }
    
    private UserModel userExist(String username) {
        try {
            final String searchStatement = "SELECT * from users where username=?";
            PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
            searchPreparedStatement.setString(1, username);
            ResultSet searhResultSet = searchPreparedStatement.executeQuery();

            while (searhResultSet.next()) {
                UserModel user=new UserModel(Integer.parseInt(searhResultSet.getString("id")));
                user.setUsername(username);
                user.setPassword(searhResultSet.getString("password"));
                user.setRole(searhResultSet.getInt("role"));
                return user;
            }
        } catch (SQLException ex) {
                System.out.println("error in " + AdminDashBoard.class.getName() + " = " + ex);
        }
        return null;
    }
    
    private void updateManagerTable(){
        final String statement = "SELECT * from users where role=?";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            preparedStatement.setInt(1, MANAGER_ROLE);
            ResultSet resultSet = preparedStatement.executeQuery();
            final String[] headerName = {"ID","Username", "Password"};
            DefaultTableModel model = new DefaultTableModel(null, headerName);
            managerTable.setModel(model);
            Object[] row = new Object[3];

            while (resultSet.next()) {
                row[0] = resultSet.getString("id");
                row[1] = resultSet.getString("username");
                row[2] = resultSet.getString("password");
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminDashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    private void managerUpdateManagerNewUnameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerUpdateManagerNewUnameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_managerUpdateManagerNewUnameTFActionPerformed

    private int updateUser(UserModel user){
        String newUsername=user.getUsername();
        String newPassword=user.getPassword();
        int role= user.getRole();
        
        final String searchStatement = "SELECT * from users where username=?";
        try {
            PreparedStatement searchPreparedStatement = ConnectionClass.getInstance().connection.prepareStatement(searchStatement);
            searchPreparedStatement.setString(1, newUsername);

            ResultSet searhResultSet = searchPreparedStatement.executeQuery();

            while (searhResultSet.next()) {                
                return USERNAME_ALREAD_IN_USE;
            }
            final String insertStatement = "update users set `username`=?, `password`=?, `role`=? where `id`=?";
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(insertStatement);
            preparedStatement.setString(1, newUsername);
            preparedStatement.setString(2, newPassword);
            preparedStatement.setInt(3, role);
            preparedStatement.setString(4, Integer.toString(user.getID()));

            final int isAdded = preparedStatement.executeUpdate();

            if (isAdded > 0) {
                return UPDATE_SUCCESSFUL;
            } 
        } catch (SQLException ex) {
            System.out.println("error in " + AdminDashBoard.class.getName() + " = " + ex);
        }    
        
        return UPDATE_UNSUCCESSFUL;
    }
    
    //returns true if user deleted.
    private boolean deleteUser(String username){
        
        final String statement = "delete from users where `username`=?";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            preparedStatement.setString(1, username);
            int f=preparedStatement.executeUpdate();
            
            // f>0 means account deleted, f<=0 means not deleted
            return f>0;
        } catch (SQLException ex) {
                System.out.println("error in " + AdminDashBoard.class.getName() + " = " + ex);
        }
        return false;
    }
    
    private void updateAdminTabel() {
        final String statement = "SELECT * from users where role=?";
        try {
            PreparedStatement preparedStatement = ConnectionClass.getInstance().connection.prepareStatement(statement);
            preparedStatement.setInt(1, ADMIN_ROLE);
            ResultSet resultSet = preparedStatement.executeQuery();
            final String[] headerName = {"ID","Username", "Role"};
            DefaultTableModel model = new DefaultTableModel(null, headerName);
            adminsTable.setModel(model);
            Object[] row = new Object[3];

            while (resultSet.next()) {
                row[0] = resultSet.getString("id");
                row[1] = resultSet.getString("username");
                row[2] = resultSet.getInt("role");
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(AdminDashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private static UserModel currentUser;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addMPassLabel;
    private javax.swing.JLabel addMUnameLabel;
    private javax.swing.JButton addManagerAccessButton;
    private javax.swing.JPanel addManagerPanel;
    private javax.swing.JPanel addRemoveUpdateManagerButtonPanel;
    private javax.swing.JTabbedPane addRemoveUpdateTabbedPanel;
    private javax.swing.JButton adminsButton;
    private javax.swing.JPanel adminsPanel;
    private javax.swing.JScrollPane adminsScrollPane;
    private javax.swing.JTable adminsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton logOutButton;
    private javax.swing.JButton managerAddManagerButton;
    private javax.swing.JLabel managerAddManagerPasswordDialogLabel;
    private javax.swing.JTextField managerAddManagerPasswordTF;
    private javax.swing.JLabel managerAddManagerUNameDialogLabel;
    private javax.swing.JTextField managerAddManagerUNameTF;
    private javax.swing.JLabel managerAddmanagerDialogLabel;
    private javax.swing.JButton managerRemoveManagerButton;
    private javax.swing.JTextField managerRemoveManagerUNameTF;
    private javax.swing.JTable managerTable;
    private javax.swing.JScrollPane managerTableScrollPane;
    private javax.swing.JLabel managerUpdateManagerNewPasswordLabel;
    private javax.swing.JTextField managerUpdateManagerNewPasswordTF;
    private javax.swing.JLabel managerUpdateManagerNewUnameLabel;
    private javax.swing.JTextField managerUpdateManagerNewUnameTF;
    private javax.swing.JLabel managerUpdateManagerUnameLabel;
    private javax.swing.JTextField managerUpdateManagerUnameTF;
    private javax.swing.JButton managerUpdateManagerUpdateButton;
    private javax.swing.JButton managersButton;
    private javax.swing.JInternalFrame managesrInternalFrame;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JButton profileButton;
    private javax.swing.JLabel profileCurrentUserLabel;
    private javax.swing.JLabel profileEnterPasswordLabel;
    private javax.swing.JTextField profileEnterPasswordTF;
    private javax.swing.JLabel profileNewPasswordLabel;
    private javax.swing.JTextField profileNewPasswordTF;
    private javax.swing.JLabel profileNewUsernameLabel;
    private javax.swing.JTextField profileNewUsernameTF;
    private javax.swing.JPanel profilePanel;
    private javax.swing.JLabel profileUpdateProfileLabel;
    private javax.swing.JLabel profileUsernameLabel;
    private javax.swing.JButton profileupdateProfileButton;
    private javax.swing.JLabel removeMUnameLabel;
    private javax.swing.JButton removeManagerAccessButton;
    private javax.swing.JPanel removeManagerPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton updateManagerAccessButton;
    private javax.swing.JPanel updateManagerPanel;
    private javax.swing.JButton vehicleButton;
    private javax.swing.JButton vehicleCategoriesButton;
    private javax.swing.JPanel vehicleCategoriesPanel;
    private javax.swing.JPanel vehiclesPanel;
    // End of variables declaration//GEN-END:variables

}
